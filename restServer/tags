!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CPPFLAGS	Makefile	/^CPPFLAGS = -std=c++11 -stdlib=libstdc++ -I \/usr\/include\/libcxxabi -lboost_system -lcurl -I \/usr\/include\/ -I \/usr\/include\/libxml2\/ -lxml2 -lcrypto -lssl -lcpprest$/;"	m
LAZY_LISTENER_H	LazyListener.h	2;"	d
LISTENER_H	Listener.h	2;"	d
LazyListener	LazyListener.cpp	/^LazyListener::LazyListener(utility::string_t url) : Listener::Listener(url)$/;"	f	class:LazyListener
LazyListener	LazyListener.h	/^class LazyListener : public Listener $/;"	c
Listener	Listener.cpp	/^Listener::Listener(utility::string_t url) : m_listener(url)$/;"	f	class:Listener
Listener	Listener.h	/^class Listener$/;"	c
MESSAGE_LISTENER_H	MessageListener.h	2;"	d
MessageListener	MessageListener.cpp	/^MessageListener::MessageListener(utility::string_t url) : Listener::Listener(url)$/;"	f	class:MessageListener
MessageListener	MessageListener.h	/^class MessageListener : public Listener $/;"	c
RM	Makefile	/^RM = rm -rf$/;"	m
close	Listener.h	/^    virtual pplx::task<void>close(){return m_listener.close();}$/;"	f	class:Listener
dictionary	Listener.h	/^	std::map<utility::string_t, utility::string_t> dictionary;$/;"	m	class:Listener
getNaverEndic	MessageListener.cpp	/^std::string MessageListener::getNaverEndic(std::string word)$/;"	f	class:MessageListener
handle_delete	LazyListener.cpp	/^void LazyListener::handle_delete(http_request message)$/;"	f	class:LazyListener
handle_delete	Listener.cpp	/^void Listener::handle_delete(http_request message)$/;"	f	class:Listener
handle_delete	MessageListener.cpp	/^void MessageListener::handle_delete(http_request message)$/;"	f	class:MessageListener
handle_get	LazyListener.cpp	/^void LazyListener::handle_get(http_request message)$/;"	f	class:LazyListener
handle_get	Listener.cpp	/^void Listener::handle_get(http_request message)$/;"	f	class:Listener
handle_get	MessageListener.cpp	/^void MessageListener::handle_get(http_request message)$/;"	f	class:MessageListener
handle_post	LazyListener.cpp	/^void LazyListener::handle_post(http_request message)$/;"	f	class:LazyListener
handle_post	Listener.cpp	/^void Listener::handle_post(http_request message)$/;"	f	class:Listener
handle_post	MessageListener.cpp	/^void MessageListener::handle_post(http_request message)$/;"	f	class:MessageListener
handle_put	LazyListener.cpp	/^void LazyListener::handle_put(http_request message)$/;"	f	class:LazyListener
handle_put	Listener.cpp	/^void Listener::handle_put(http_request message)$/;"	f	class:Listener
handle_put	MessageListener.cpp	/^void MessageListener::handle_put(http_request message)$/;"	f	class:MessageListener
ltrim	MessageListener.cpp	/^static inline void ltrim(std::string &s)$/;"	f	file:
m_listener	Listener.h	/^   	http_listener m_listener;$/;"	m	class:Listener
main	LazyMain.cpp	/^int main(void)$/;"	f
main	MessageMain.cpp	/^int main(void)$/;"	f
main	cpprest.cpp	/^int main(void)$/;"	f
open	Listener.h	/^    virtual pplx::task<void>open(){return m_listener.open();}$/;"	f	class:Listener
rtrim	MessageListener.cpp	/^static inline void rtrim(std::string &s)$/;"	f	file:
trim	MessageListener.cpp	/^ static inline void trim(std::string &s)$/;"	f	file:
